@using SharedClasses
@using WebApiFromServerApp.Services
@inject WeatherForecastServiceForWebApi _service

<h3>URL to POST to: @ActionUrl</h3>

<TelerikGrid Data=@GridData TotalCount=@Total OnRead=@ReadItems Groupable="true"
             FilterMode=@GridFilterMode.FilterMenu Sortable=true Pageable=true Height="300px">
    <GridColumns>
        <GridColumn Field=@nameof(WeatherForecast.Id) Groupable="false" />
        <GridColumn Field=@nameof(WeatherForecast.Date) Title="Date" />
        <GridColumn Field=@nameof(WeatherForecast.Summary) Title="Summary" />
        <GridColumn Field=@nameof(WeatherForecast.TemperatureC) Title="Temp C" />
    </GridColumns>
</TelerikGrid>

@code {
    [Parameter] public string ActionUrl { get; set; }
    public List<object> GridData { get; set; }
    public int Total { get; set; } = 0;

    protected async Task ReadItems(GridReadEventArgs args)
    {
        // we pass the request to the service, and there Telerik DataSource Extension methods will shape the data
        // then the service returns our project-specific envelope so that the data can be serialized by the framework
        DataEnvelope<WeatherForecast> result = await _service.GetData(args.Request, ActionUrl);

        if (args.Request.Groups.Count > 0)
        {
            var data = GroupDataHelpers.DeserializeGroups<WeatherForecast>(result.GroupedData);
            GridData = data.Cast<object>().ToList();
        }
        else
        {
            GridData = result.CurrentPageData.Cast<object>().ToList();
        }

        Total = result.TotalItemCount;

        StateHasChanged();
    }
}